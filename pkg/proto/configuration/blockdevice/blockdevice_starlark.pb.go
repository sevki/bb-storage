// Code generated by protoc-gen-starlark-go. DO NOT EDIT.

package blockdevice

import (
	fmt "fmt"

	configuration "github.com/buildbarn/bb-storage/pkg/proto/configuration"
	starlark "go.starlark.net/starlark"
)

type FileConfigurationStarlark struct {
	Path      starlark.String
	SizeBytes starlark.Int
}

func init() {
	configuration.Register("buildbarn.configuration.blockdevice.FileConfiguration", new(FileConfigurationStarlark))
}

var (
	_ starlark.Value    = (*FileConfigurationStarlark)(nil)
	_ starlark.HasAttrs = (*FileConfigurationStarlark)(nil)
)

func (x *FileConfigurationStarlark) String() string {
	if x == nil {
		return "FileConfiguration{}"
	}
	return fmt.Sprintf("FileConfiguration{"+
		"path= %s"+
		", sizeBytes= %s"+
		"}",
		x.Path,
		x.SizeBytes,
	)
}

func (x *FileConfigurationStarlark) Type() string {
	return "buildbarn.configuration.blockdevice.FileConfiguration"
}
func (x *FileConfigurationStarlark) Freeze()               {}
func (x *FileConfigurationStarlark) Truth() starlark.Bool  { return true }
func (x *FileConfigurationStarlark) Hash() (uint32, error) { return 0, fmt.Errorf("un-hashable") }
func (x *FileConfigurationStarlark) AttrNames() []string {
	return []string{
		"path",
		"sizeBytes", "size_bytes",
	}
}

func (x *FileConfigurationStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "path":
		return x.Path, nil
	case "sizeBytes", "size_bytes":
		return x.SizeBytes, nil
	default:
		return nil, nil
	}
}

func (x *FileConfiguration) ToStarlark() *FileConfigurationStarlark {
	if x == nil {
		return nil
	}

	return &FileConfigurationStarlark{
		Path:      starlark.String(x.GetPath()),
		SizeBytes: starlark.MakeInt64(int64(x.GetSizeBytes())),
	}
}

func (x *FileConfigurationStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "path":
		x.Path = val.(starlark.String)
	case "sizeBytes", "size_bytes":
		x.SizeBytes = val.(starlark.Int)
	default:
		return nil
	}
	return nil
}

type ConfigurationStarlark struct {
	Source     starlark.Value
	DevicePath starlark.String
	File       *FileConfigurationStarlark
}

func init() {
	configuration.Register("buildbarn.configuration.blockdevice.Configuration", new(ConfigurationStarlark))
}

var (
	_ starlark.Value    = (*ConfigurationStarlark)(nil)
	_ starlark.HasAttrs = (*ConfigurationStarlark)(nil)
)

func (x *ConfigurationStarlark) String() string {
	if x == nil {
		return "Configuration{}"
	}
	return fmt.Sprintf("Configuration{"+
		"source= %s"+
		"devicePath= %s"+
		", file= %s"+
		"}",
		x.Source,
		x.DevicePath,
		x.File,
	)
}

func (x *ConfigurationStarlark) Type() string {
	return "buildbarn.configuration.blockdevice.Configuration"
}
func (x *ConfigurationStarlark) Freeze()               {}
func (x *ConfigurationStarlark) Truth() starlark.Bool  { return true }
func (x *ConfigurationStarlark) Hash() (uint32, error) { return 0, fmt.Errorf("un-hashable") }
func (x *ConfigurationStarlark) AttrNames() []string {
	return []string{
		"source",
		"devicePath", "device_path",
		"file",
	}
}

func (x *ConfigurationStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "source":
		return x.Source, nil
	case "devicePath", "device_path":
		return x.DevicePath, nil
	case "file":
		return x.File, nil
	default:
		return nil, nil
	}
}

func (x *Configuration) ToStarlark() *ConfigurationStarlark {
	if x == nil {
		return nil
	}

	var oneof_Source starlark.Value
	switch x.Source.(type) {
	case *Configuration_DevicePath:
		oneof_Source = starlark.String(x.GetDevicePath())
	case *Configuration_File:
		oneof_Source = x.GetFile().ToStarlark()
	default:
		oneof_Source = starlark.None
	}

	return &ConfigurationStarlark{
		Source:     oneof_Source,
		DevicePath: starlark.String(x.GetDevicePath()),
		File:       x.GetFile().ToStarlark(),
	}
}

func (x *ConfigurationStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "source":
		x.Source = val.(starlark.String)
	case "devicePath", "device_path":
		x.DevicePath = val.(starlark.String)
	case "file":
		x.File = val.(*FileConfigurationStarlark)
	default:
		return nil
	}
	return nil
}
