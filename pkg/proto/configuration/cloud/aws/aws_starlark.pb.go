// Code generated by protoc-gen-starlark-go. DO NOT EDIT.

package aws

import (
	fmt "fmt"

	configuration "github.com/buildbarn/bb-storage/pkg/proto/configuration"
	starlark "go.starlark.net/starlark"
)

type StaticCredentialsStarlark struct {
	AccessKeyId     starlark.String
	SecretAccessKey starlark.String
}

func init() {
	configuration.Register("buildbarn.configuration.cloud.aws.StaticCredentials", new(StaticCredentialsStarlark))
}

var (
	_ starlark.Value    = (*StaticCredentialsStarlark)(nil)
	_ starlark.HasAttrs = (*StaticCredentialsStarlark)(nil)
)

func (x *StaticCredentialsStarlark) String() string {
	if x == nil {
		return "StaticCredentials{}"
	}
	return fmt.Sprintf("StaticCredentials{"+
		"accessKeyId= %s"+
		", secretAccessKey= %s"+
		"}",
		x.AccessKeyId,
		x.SecretAccessKey,
	)
}

func (x *StaticCredentialsStarlark) Type() string {
	return "buildbarn.configuration.cloud.aws.StaticCredentials"
}
func (x *StaticCredentialsStarlark) Freeze()               {}
func (x *StaticCredentialsStarlark) Truth() starlark.Bool  { return true }
func (x *StaticCredentialsStarlark) Hash() (uint32, error) { return 0, fmt.Errorf("un-hashable") }
func (x *StaticCredentialsStarlark) AttrNames() []string {
	return []string{
		"accessKeyId", "access_key_id",
		"secretAccessKey", "secret_access_key",
	}
}

func (x *StaticCredentialsStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "accessKeyId", "access_key_id":
		return x.AccessKeyId, nil
	case "secretAccessKey", "secret_access_key":
		return x.SecretAccessKey, nil
	default:
		return nil, nil
	}
}

func (x *StaticCredentials) ToStarlark() *StaticCredentialsStarlark {
	if x == nil {
		return nil
	}

	return &StaticCredentialsStarlark{
		AccessKeyId:     starlark.String(x.GetAccessKeyId()),
		SecretAccessKey: starlark.String(x.GetSecretAccessKey()),
	}
}

func (x *StaticCredentialsStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "accessKeyId", "access_key_id":
		x.AccessKeyId = val.(starlark.String)
	case "secretAccessKey", "secret_access_key":
		x.SecretAccessKey = val.(starlark.String)
	default:
		return nil
	}
	return nil
}

type SessionConfigurationStarlark struct {
	Endpoint          starlark.String
	Region            starlark.String
	DisableSsl        starlark.Bool
	S3ForcePathStyle  starlark.Bool
	StaticCredentials *StaticCredentialsStarlark
}

func init() {
	configuration.Register("buildbarn.configuration.cloud.aws.SessionConfiguration", new(SessionConfigurationStarlark))
}

var (
	_ starlark.Value    = (*SessionConfigurationStarlark)(nil)
	_ starlark.HasAttrs = (*SessionConfigurationStarlark)(nil)
)

func (x *SessionConfigurationStarlark) String() string {
	if x == nil {
		return "SessionConfiguration{}"
	}
	return fmt.Sprintf("SessionConfiguration{"+
		"endpoint= %s"+
		", region= %s"+
		", disableSsl= %s"+
		", s3ForcePathStyle= %s"+
		", staticCredentials= %s"+
		"}",
		x.Endpoint,
		x.Region,
		x.DisableSsl,
		x.S3ForcePathStyle,
		x.StaticCredentials,
	)
}

func (x *SessionConfigurationStarlark) Type() string {
	return "buildbarn.configuration.cloud.aws.SessionConfiguration"
}
func (x *SessionConfigurationStarlark) Freeze()               {}
func (x *SessionConfigurationStarlark) Truth() starlark.Bool  { return true }
func (x *SessionConfigurationStarlark) Hash() (uint32, error) { return 0, fmt.Errorf("un-hashable") }
func (x *SessionConfigurationStarlark) AttrNames() []string {
	return []string{
		"endpoint",
		"region",
		"disableSsl", "disable_ssl",
		"s3ForcePathStyle", "s3_force_path_style",
		"staticCredentials", "static_credentials",
	}
}

func (x *SessionConfigurationStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "endpoint":
		return x.Endpoint, nil
	case "region":
		return x.Region, nil
	case "disableSsl", "disable_ssl":
		return x.DisableSsl, nil
	case "s3ForcePathStyle", "s3_force_path_style":
		return x.S3ForcePathStyle, nil
	case "staticCredentials", "static_credentials":
		return x.StaticCredentials, nil
	default:
		return nil, nil
	}
}

func (x *SessionConfiguration) ToStarlark() *SessionConfigurationStarlark {
	if x == nil {
		return nil
	}

	return &SessionConfigurationStarlark{
		Endpoint:          starlark.String(x.GetEndpoint()),
		Region:            starlark.String(x.GetRegion()),
		DisableSsl:        starlark.Bool(x.GetDisableSsl()),
		S3ForcePathStyle:  starlark.Bool(x.GetS3ForcePathStyle()),
		StaticCredentials: x.GetStaticCredentials().ToStarlark(),
	}
}

func (x *SessionConfigurationStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "endpoint":
		x.Endpoint = val.(starlark.String)
	case "region":
		x.Region = val.(starlark.String)
	case "disableSsl", "disable_ssl":
		x.DisableSsl = val.(starlark.Bool)
	case "s3ForcePathStyle", "s3_force_path_style":
		x.S3ForcePathStyle = val.(starlark.Bool)
	case "staticCredentials", "static_credentials":
		x.StaticCredentials = val.(*StaticCredentialsStarlark)
	default:
		return nil
	}
	return nil
}
