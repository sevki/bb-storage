// Code generated by protoc-gen-starlark-go. DO NOT EDIT.

package global

import (
	fmt "fmt"

	configuration "github.com/buildbarn/bb-storage/pkg/proto/configuration"
	grpc "github.com/buildbarn/bb-storage/pkg/proto/configuration/grpc"
	tls "github.com/buildbarn/bb-storage/pkg/proto/configuration/tls"
	starlarkutil "github.com/buildbarn/bb-storage/pkg/starlarkutil"
	time "go.starlark.net/lib/time"
	starlark "go.starlark.net/starlark"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/emptypb"
)

type BasicAuthenticationConfigurationStarlark struct {
	Username starlark.String
	Password starlark.String
}

func init() {
	configuration.Register("buildbarn.configuration.global.BasicAuthenticationConfiguration", new(BasicAuthenticationConfigurationStarlark))
}

var (
	_ starlark.Value    = (*BasicAuthenticationConfigurationStarlark)(nil)
	_ starlark.HasAttrs = (*BasicAuthenticationConfigurationStarlark)(nil)
)

func (x *BasicAuthenticationConfigurationStarlark) String() string {
	if x == nil {
		return "BasicAuthenticationConfiguration{}"
	}
	return fmt.Sprintf("BasicAuthenticationConfiguration{"+
		"username= %s"+
		", password= %s"+
		"}",
		x.Username,
		x.Password,
	)
}

func (x *BasicAuthenticationConfigurationStarlark) Type() string {
	return "buildbarn.configuration.global.BasicAuthenticationConfiguration"
}
func (x *BasicAuthenticationConfigurationStarlark) Freeze()              {}
func (x *BasicAuthenticationConfigurationStarlark) Truth() starlark.Bool { return true }
func (x *BasicAuthenticationConfigurationStarlark) Hash() (uint32, error) {
	return 0, fmt.Errorf("un-hashable")
}

func (x *BasicAuthenticationConfigurationStarlark) AttrNames() []string {
	return []string{
		"username",
		"password",
	}
}

func (x *BasicAuthenticationConfigurationStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "username":
		return x.Username, nil
	case "password":
		return x.Password, nil
	default:
		return nil, nil
	}
}

func (x *BasicAuthenticationConfiguration) ToStarlark() *BasicAuthenticationConfigurationStarlark {
	if x == nil {
		return nil
	}

	return &BasicAuthenticationConfigurationStarlark{
		Username: starlark.String(x.GetUsername()),
		Password: starlark.String(x.GetPassword()),
	}
}

func (x *BasicAuthenticationConfigurationStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "username":
		x.Username = val.(starlark.String)
	case "password":
		x.Password = val.(starlark.String)
	default:
		return nil
	}
	return nil
}

type PrometheusPushgatewayConfigurationStarlark struct {
	Url                 starlark.String
	Job                 starlark.String
	BasicAuthentication *BasicAuthenticationConfigurationStarlark
	Grouping            *starlark.Dict
	PushInterval        time.Duration
}

func init() {
	configuration.Register("buildbarn.configuration.global.PrometheusPushgatewayConfiguration", new(PrometheusPushgatewayConfigurationStarlark))
}

var (
	_ starlark.Value    = (*PrometheusPushgatewayConfigurationStarlark)(nil)
	_ starlark.HasAttrs = (*PrometheusPushgatewayConfigurationStarlark)(nil)
)

func (x *PrometheusPushgatewayConfigurationStarlark) String() string {
	if x == nil {
		return "PrometheusPushgatewayConfiguration{}"
	}
	return fmt.Sprintf("PrometheusPushgatewayConfiguration{"+
		"url= %s"+
		", job= %s"+
		", basicAuthentication= %s"+
		", grouping= %s"+
		", pushInterval= %s"+
		"}",
		x.Url,
		x.Job,
		x.BasicAuthentication,
		x.Grouping,
		x.PushInterval,
	)
}

func (x *PrometheusPushgatewayConfigurationStarlark) Type() string {
	return "buildbarn.configuration.global.PrometheusPushgatewayConfiguration"
}
func (x *PrometheusPushgatewayConfigurationStarlark) Freeze()              {}
func (x *PrometheusPushgatewayConfigurationStarlark) Truth() starlark.Bool { return true }
func (x *PrometheusPushgatewayConfigurationStarlark) Hash() (uint32, error) {
	return 0, fmt.Errorf("un-hashable")
}

func (x *PrometheusPushgatewayConfigurationStarlark) AttrNames() []string {
	return []string{
		"url",
		"job",
		"basicAuthentication", "basic_authentication",
		"grouping",
		"pushInterval", "push_interval",
	}
}

func (x *PrometheusPushgatewayConfigurationStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "url":
		return x.Url, nil
	case "job":
		return x.Job, nil
	case "basicAuthentication", "basic_authentication":
		return x.BasicAuthentication, nil
	case "grouping":
		return x.Grouping, nil
	case "pushInterval", "push_interval":
		return x.PushInterval, nil
	default:
		return nil, nil
	}
}

func (x *PrometheusPushgatewayConfiguration) ToStarlark() *PrometheusPushgatewayConfigurationStarlark {
	if x == nil {
		return nil
	}

	var m_Grouping *starlark.Dict
	if tm_Grouping := x.GetGrouping(); tm_Grouping != nil {
		m_Grouping = starlark.NewDict(len(tm_Grouping))
		for k, v := range tm_Grouping {
			_ = m_Grouping.SetKey(starlark.String(k), starlark.String(v))
		}
	} else {
		m_Grouping = starlark.NewDict(0)
	}

	return &PrometheusPushgatewayConfigurationStarlark{
		Url:                 starlark.String(x.GetUrl()),
		Job:                 starlark.String(x.GetJob()),
		BasicAuthentication: x.GetBasicAuthentication().ToStarlark(),
		Grouping:            m_Grouping,
		PushInterval:        time.Duration(x.GetPushInterval().AsDuration()),
	}
}

func (x *PrometheusPushgatewayConfigurationStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "url":
		x.Url = val.(starlark.String)
	case "job":
		x.Job = val.(starlark.String)
	case "basicAuthentication", "basic_authentication":
		x.BasicAuthentication = val.(*BasicAuthenticationConfigurationStarlark)
	case "grouping":
		x.Grouping = val.(*starlark.Dict)
	case "pushInterval", "push_interval":
		x.PushInterval = val.(time.Duration)
	default:
		return nil
	}
	return nil
}

type TracingConfigurationStarlark struct {
	Backends           *starlark.List
	ResourceAttributes *starlark.Dict
	Sampler            *TracingConfiguration_SamplerStarlark
}

func init() {
	configuration.Register("buildbarn.configuration.global.TracingConfiguration", new(TracingConfigurationStarlark))
}

var (
	_ starlark.Value    = (*TracingConfigurationStarlark)(nil)
	_ starlark.HasAttrs = (*TracingConfigurationStarlark)(nil)
)

func (x *TracingConfigurationStarlark) String() string {
	if x == nil {
		return "TracingConfiguration{}"
	}
	return fmt.Sprintf("TracingConfiguration{"+
		"backends= %s"+
		", resourceAttributes= %s"+
		", sampler= %s"+
		"}",
		x.Backends,
		x.ResourceAttributes,
		x.Sampler,
	)
}

func (x *TracingConfigurationStarlark) Type() string {
	return "buildbarn.configuration.global.TracingConfiguration"
}
func (x *TracingConfigurationStarlark) Freeze()               {}
func (x *TracingConfigurationStarlark) Truth() starlark.Bool  { return true }
func (x *TracingConfigurationStarlark) Hash() (uint32, error) { return 0, fmt.Errorf("un-hashable") }
func (x *TracingConfigurationStarlark) AttrNames() []string {
	return []string{
		"backends",
		"resourceAttributes", "resource_attributes",
		"sampler",
	}
}

func (x *TracingConfigurationStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "backends":
		return x.Backends, nil
	case "resourceAttributes", "resource_attributes":
		return x.ResourceAttributes, nil
	case "sampler":
		return x.Sampler, nil
	default:
		return nil, nil
	}
}

func (x *TracingConfiguration) ToStarlark() *TracingConfigurationStarlark {
	if x == nil {
		return nil
	}

	l_Backends := make([]starlark.Value, len(x.GetBackends()))
	for i, x := range x.GetBackends() {
		l_Backends[i] = x.ToStarlark()
	}

	var m_ResourceAttributes *starlark.Dict
	if tm_ResourceAttributes := x.GetResourceAttributes(); tm_ResourceAttributes != nil {
		m_ResourceAttributes = starlark.NewDict(len(tm_ResourceAttributes))
		for k, v := range tm_ResourceAttributes {
			_ = m_ResourceAttributes.SetKey(starlark.String(k), v.ToStarlark())
		}
	} else {
		m_ResourceAttributes = starlark.NewDict(0)
	}

	return &TracingConfigurationStarlark{
		Backends:           starlark.NewList(l_Backends),
		ResourceAttributes: m_ResourceAttributes,
		Sampler:            x.GetSampler().ToStarlark(),
	}
}

func (x *TracingConfigurationStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "backends":
		x.Backends = val.(*starlark.List)
	case "resourceAttributes", "resource_attributes":
		x.ResourceAttributes = val.(*starlark.Dict)
	case "sampler":
		x.Sampler = val.(*TracingConfiguration_SamplerStarlark)
	default:
		return nil
	}
	return nil
}

type SetUmaskConfigurationStarlark struct {
	Umask starlark.Int
}

func init() {
	configuration.Register("buildbarn.configuration.global.SetUmaskConfiguration", new(SetUmaskConfigurationStarlark))
}

var (
	_ starlark.Value    = (*SetUmaskConfigurationStarlark)(nil)
	_ starlark.HasAttrs = (*SetUmaskConfigurationStarlark)(nil)
)

func (x *SetUmaskConfigurationStarlark) String() string {
	if x == nil {
		return "SetUmaskConfiguration{}"
	}
	return fmt.Sprintf("SetUmaskConfiguration{"+
		"umask= %s"+
		"}",
		x.Umask,
	)
}

func (x *SetUmaskConfigurationStarlark) Type() string {
	return "buildbarn.configuration.global.SetUmaskConfiguration"
}
func (x *SetUmaskConfigurationStarlark) Freeze()               {}
func (x *SetUmaskConfigurationStarlark) Truth() starlark.Bool  { return true }
func (x *SetUmaskConfigurationStarlark) Hash() (uint32, error) { return 0, fmt.Errorf("un-hashable") }
func (x *SetUmaskConfigurationStarlark) AttrNames() []string {
	return []string{
		"umask",
	}
}

func (x *SetUmaskConfigurationStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "umask":
		return x.Umask, nil
	default:
		return nil, nil
	}
}

func (x *SetUmaskConfiguration) ToStarlark() *SetUmaskConfigurationStarlark {
	if x == nil {
		return nil
	}

	return &SetUmaskConfigurationStarlark{
		Umask: starlark.MakeUint64(uint64(x.GetUmask())),
	}
}

func (x *SetUmaskConfigurationStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "umask":
		x.Umask = val.(starlark.Int)
	default:
		return nil
	}
	return nil
}

type ConfigurationStarlark struct {
	Tracing               *TracingConfigurationStarlark
	MutexProfileFraction  starlark.Int
	PrometheusPushgateway *PrometheusPushgatewayConfigurationStarlark
	LogPaths              *starlark.List
	DiagnosticsHttpServer *DiagnosticsHTTPServerConfigurationStarlark
	SetUmask              *SetUmaskConfigurationStarlark
}

func init() {
	configuration.Register("buildbarn.configuration.global.Configuration", new(ConfigurationStarlark))
}

var (
	_ starlark.Value    = (*ConfigurationStarlark)(nil)
	_ starlark.HasAttrs = (*ConfigurationStarlark)(nil)
)

func (x *ConfigurationStarlark) String() string {
	if x == nil {
		return "Configuration{}"
	}
	return fmt.Sprintf("Configuration{"+
		"tracing= %s"+
		", mutexProfileFraction= %s"+
		", prometheusPushgateway= %s"+
		", logPaths= %s"+
		", diagnosticsHttpServer= %s"+
		", setUmask= %s"+
		"}",
		x.Tracing,
		x.MutexProfileFraction,
		x.PrometheusPushgateway,
		x.LogPaths,
		x.DiagnosticsHttpServer,
		x.SetUmask,
	)
}
func (x *ConfigurationStarlark) Type() string          { return "buildbarn.configuration.global.Configuration" }
func (x *ConfigurationStarlark) Freeze()               {}
func (x *ConfigurationStarlark) Truth() starlark.Bool  { return true }
func (x *ConfigurationStarlark) Hash() (uint32, error) { return 0, fmt.Errorf("un-hashable") }
func (x *ConfigurationStarlark) AttrNames() []string {
	return []string{
		"tracing",
		"mutexProfileFraction", "mutex_profile_fraction",
		"prometheusPushgateway", "prometheus_pushgateway",
		"logPaths", "log_paths",
		"diagnosticsHttpServer", "diagnostics_http_server",
		"setUmask", "set_umask",
	}
}

func (x *ConfigurationStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "tracing":
		return x.Tracing, nil
	case "mutexProfileFraction", "mutex_profile_fraction":
		return x.MutexProfileFraction, nil
	case "prometheusPushgateway", "prometheus_pushgateway":
		return x.PrometheusPushgateway, nil
	case "logPaths", "log_paths":
		return x.LogPaths, nil
	case "diagnosticsHttpServer", "diagnostics_http_server":
		return x.DiagnosticsHttpServer, nil
	case "setUmask", "set_umask":
		return x.SetUmask, nil
	default:
		return nil, nil
	}
}

func (x *Configuration) ToStarlark() *ConfigurationStarlark {
	if x == nil {
		return nil
	}

	l_LogPaths := make([]starlark.Value, len(x.GetLogPaths()))
	for i, x := range x.GetLogPaths() {
		l_LogPaths[i] = starlark.String(x)
	}

	return &ConfigurationStarlark{
		Tracing:               x.GetTracing().ToStarlark(),
		MutexProfileFraction:  starlark.MakeInt64(int64(x.GetMutexProfileFraction())),
		PrometheusPushgateway: x.GetPrometheusPushgateway().ToStarlark(),
		LogPaths:              starlark.NewList(l_LogPaths),
		DiagnosticsHttpServer: x.GetDiagnosticsHttpServer().ToStarlark(),
		SetUmask:              x.GetSetUmask().ToStarlark(),
	}
}

func (x *ConfigurationStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "tracing":
		x.Tracing = val.(*TracingConfigurationStarlark)
	case "mutexProfileFraction", "mutex_profile_fraction":
		x.MutexProfileFraction = val.(starlark.Int)
	case "prometheusPushgateway", "prometheus_pushgateway":
		x.PrometheusPushgateway = val.(*PrometheusPushgatewayConfigurationStarlark)
	case "logPaths", "log_paths":
		x.LogPaths = val.(*starlark.List)
	case "diagnosticsHttpServer", "diagnostics_http_server":
		x.DiagnosticsHttpServer = val.(*DiagnosticsHTTPServerConfigurationStarlark)
	case "setUmask", "set_umask":
		x.SetUmask = val.(*SetUmaskConfigurationStarlark)
	default:
		return nil
	}
	return nil
}

type DiagnosticsHTTPServerConfigurationStarlark struct {
	ListenAddress     starlark.String
	EnablePprof       starlark.Bool
	EnablePrometheus  starlark.Bool
	EnableActiveSpans starlark.Bool
}

func init() {
	configuration.Register("buildbarn.configuration.global.DiagnosticsHTTPServerConfiguration", new(DiagnosticsHTTPServerConfigurationStarlark))
}

var (
	_ starlark.Value    = (*DiagnosticsHTTPServerConfigurationStarlark)(nil)
	_ starlark.HasAttrs = (*DiagnosticsHTTPServerConfigurationStarlark)(nil)
)

func (x *DiagnosticsHTTPServerConfigurationStarlark) String() string {
	if x == nil {
		return "DiagnosticsHTTPServerConfiguration{}"
	}
	return fmt.Sprintf("DiagnosticsHTTPServerConfiguration{"+
		"listenAddress= %s"+
		", enablePprof= %s"+
		", enablePrometheus= %s"+
		", enableActiveSpans= %s"+
		"}",
		x.ListenAddress,
		x.EnablePprof,
		x.EnablePrometheus,
		x.EnableActiveSpans,
	)
}

func (x *DiagnosticsHTTPServerConfigurationStarlark) Type() string {
	return "buildbarn.configuration.global.DiagnosticsHTTPServerConfiguration"
}
func (x *DiagnosticsHTTPServerConfigurationStarlark) Freeze()              {}
func (x *DiagnosticsHTTPServerConfigurationStarlark) Truth() starlark.Bool { return true }
func (x *DiagnosticsHTTPServerConfigurationStarlark) Hash() (uint32, error) {
	return 0, fmt.Errorf("un-hashable")
}

func (x *DiagnosticsHTTPServerConfigurationStarlark) AttrNames() []string {
	return []string{
		"listenAddress", "listen_address",
		"enablePprof", "enable_pprof",
		"enablePrometheus", "enable_prometheus",
		"enableActiveSpans", "enable_active_spans",
	}
}

func (x *DiagnosticsHTTPServerConfigurationStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "listenAddress", "listen_address":
		return x.ListenAddress, nil
	case "enablePprof", "enable_pprof":
		return x.EnablePprof, nil
	case "enablePrometheus", "enable_prometheus":
		return x.EnablePrometheus, nil
	case "enableActiveSpans", "enable_active_spans":
		return x.EnableActiveSpans, nil
	default:
		return nil, nil
	}
}

func (x *DiagnosticsHTTPServerConfiguration) ToStarlark() *DiagnosticsHTTPServerConfigurationStarlark {
	if x == nil {
		return nil
	}

	return &DiagnosticsHTTPServerConfigurationStarlark{
		ListenAddress:     starlark.String(x.GetListenAddress()),
		EnablePprof:       starlark.Bool(x.GetEnablePprof()),
		EnablePrometheus:  starlark.Bool(x.GetEnablePrometheus()),
		EnableActiveSpans: starlark.Bool(x.GetEnableActiveSpans()),
	}
}

func (x *DiagnosticsHTTPServerConfigurationStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "listenAddress", "listen_address":
		x.ListenAddress = val.(starlark.String)
	case "enablePprof", "enable_pprof":
		x.EnablePprof = val.(starlark.Bool)
	case "enablePrometheus", "enable_prometheus":
		x.EnablePrometheus = val.(starlark.Bool)
	case "enableActiveSpans", "enable_active_spans":
		x.EnableActiveSpans = val.(starlark.Bool)
	default:
		return nil
	}
	return nil
}

type TracingConfiguration_BackendStarlark struct {
	SpanExporter                starlark.Value
	JaegerCollectorSpanExporter *TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark
	OtlpSpanExporter            *grpc.ClientConfigurationStarlark
	SpanProcessor               starlark.Value
	SimpleSpanProcessor         starlarkutil.Empty
	BatchSpanProcessor          *TracingConfiguration_Backend_BatchSpanProcessorStarlark
}

func init() {
	configuration.Register("buildbarn.configuration.global.TracingConfiguration.Backend", new(TracingConfiguration_BackendStarlark))
}

var (
	_ starlark.Value    = (*TracingConfiguration_BackendStarlark)(nil)
	_ starlark.HasAttrs = (*TracingConfiguration_BackendStarlark)(nil)
)

func (x *TracingConfiguration_BackendStarlark) String() string {
	if x == nil {
		return "Backend{}"
	}
	return fmt.Sprintf("Backend{"+
		"span_exporter= %s"+
		"jaegerCollectorSpanExporter= %s"+
		", otlpSpanExporter= %s"+
		", span_processor= %s"+
		", simpleSpanProcessor= %s"+
		", batchSpanProcessor= %s"+
		"}",
		x.SpanExporter,
		x.JaegerCollectorSpanExporter,
		x.OtlpSpanExporter,
		x.SpanProcessor,
		x.SimpleSpanProcessor,
		x.BatchSpanProcessor,
	)
}

func (x *TracingConfiguration_BackendStarlark) Type() string {
	return "buildbarn.configuration.global.TracingConfiguration.Backend"
}
func (x *TracingConfiguration_BackendStarlark) Freeze()              {}
func (x *TracingConfiguration_BackendStarlark) Truth() starlark.Bool { return true }
func (x *TracingConfiguration_BackendStarlark) Hash() (uint32, error) {
	return 0, fmt.Errorf("un-hashable")
}

func (x *TracingConfiguration_BackendStarlark) AttrNames() []string {
	return []string{
		"span_exporter",
		"jaegerCollectorSpanExporter", "jaeger_collector_span_exporter",
		"otlpSpanExporter", "otlp_span_exporter",
		"span_processor",
		"simpleSpanProcessor", "simple_span_processor",
		"batchSpanProcessor", "batch_span_processor",
	}
}

func (x *TracingConfiguration_BackendStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "span_exporter":
		return x.SpanExporter, nil
	case "jaegerCollectorSpanExporter", "jaeger_collector_span_exporter":
		return x.JaegerCollectorSpanExporter, nil
	case "otlpSpanExporter", "otlp_span_exporter":
		return x.OtlpSpanExporter, nil
	case "span_processor":
		return x.SpanProcessor, nil
	case "simpleSpanProcessor", "simple_span_processor":
		return x.SimpleSpanProcessor, nil
	case "batchSpanProcessor", "batch_span_processor":
		return x.BatchSpanProcessor, nil
	default:
		return nil, nil
	}
}

func (x *TracingConfiguration_Backend) ToStarlark() *TracingConfiguration_BackendStarlark {
	if x == nil {
		return nil
	}

	var oneof_SpanExporter starlark.Value
	switch x.SpanExporter.(type) {
	case *TracingConfiguration_Backend_JaegerCollectorSpanExporter_:
		oneof_SpanExporter = x.GetJaegerCollectorSpanExporter().ToStarlark()
	case *TracingConfiguration_Backend_OtlpSpanExporter:
		oneof_SpanExporter = x.GetOtlpSpanExporter().ToStarlark()
	default:
		oneof_SpanExporter = starlark.None
	}

	var oneof_SpanProcessor starlark.Value
	switch x.SpanProcessor.(type) {
	case *TracingConfiguration_Backend_SimpleSpanProcessor:
		oneof_SpanProcessor = starlarkutil.ToEmpty(x.GetSimpleSpanProcessor())
	case *TracingConfiguration_Backend_BatchSpanProcessor_:
		oneof_SpanProcessor = x.GetBatchSpanProcessor().ToStarlark()
	default:
		oneof_SpanProcessor = starlark.None
	}

	return &TracingConfiguration_BackendStarlark{
		SpanExporter:                oneof_SpanExporter,
		JaegerCollectorSpanExporter: x.GetJaegerCollectorSpanExporter().ToStarlark(),
		OtlpSpanExporter:            x.GetOtlpSpanExporter().ToStarlark(),
		SpanProcessor:               oneof_SpanProcessor,
		SimpleSpanProcessor:         starlarkutil.ToEmpty(x.GetSimpleSpanProcessor()),
		BatchSpanProcessor:          x.GetBatchSpanProcessor().ToStarlark(),
	}
}

func (x *TracingConfiguration_BackendStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "span_exporter":
		x.SpanExporter = val.(*TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark)
	case "jaegerCollectorSpanExporter", "jaeger_collector_span_exporter":
		x.JaegerCollectorSpanExporter = val.(*TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark)
	case "otlpSpanExporter", "otlp_span_exporter":
		x.OtlpSpanExporter = val.(*grpc.ClientConfigurationStarlark)
	case "span_processor":
		x.SpanProcessor = val.(starlarkutil.Empty)
	case "simpleSpanProcessor", "simple_span_processor":
		x.SimpleSpanProcessor = val.(starlarkutil.Empty)
	case "batchSpanProcessor", "batch_span_processor":
		x.BatchSpanProcessor = val.(*TracingConfiguration_Backend_BatchSpanProcessorStarlark)
	default:
		return nil
	}
	return nil
}

type TracingConfiguration_ResourceAttributeValueStarlark struct {
	Kind         starlark.Value
	Bool         starlark.Bool
	Int64        starlark.Int
	Float64      starlark.Float
	String_      starlark.String
	BoolArray    *TracingConfiguration_ResourceAttributeValue_BoolArrayStarlark
	Int64Array   *TracingConfiguration_ResourceAttributeValue_Int64ArrayStarlark
	Float64Array *TracingConfiguration_ResourceAttributeValue_Float64ArrayStarlark
	StringArray  *TracingConfiguration_ResourceAttributeValue_StringArrayStarlark
}

func init() {
	configuration.Register("buildbarn.configuration.global.TracingConfiguration.ResourceAttributeValue", new(TracingConfiguration_ResourceAttributeValueStarlark))
}

var (
	_ starlark.Value    = (*TracingConfiguration_ResourceAttributeValueStarlark)(nil)
	_ starlark.HasAttrs = (*TracingConfiguration_ResourceAttributeValueStarlark)(nil)
)

func (x *TracingConfiguration_ResourceAttributeValueStarlark) String() string {
	if x == nil {
		return "ResourceAttributeValue{}"
	}
	return fmt.Sprintf("ResourceAttributeValue{"+
		"kind= %s"+
		"bool= %s"+
		", int64= %s"+
		", float64= %s"+
		", string= %s"+
		", boolArray= %s"+
		", int64Array= %s"+
		", float64Array= %s"+
		", stringArray= %s"+
		"}",
		x.Kind,
		x.Bool,
		x.Int64,
		x.Float64,
		x.String_,
		x.BoolArray,
		x.Int64Array,
		x.Float64Array,
		x.StringArray,
	)
}

func (x *TracingConfiguration_ResourceAttributeValueStarlark) Type() string {
	return "buildbarn.configuration.global.TracingConfiguration.ResourceAttributeValue"
}
func (x *TracingConfiguration_ResourceAttributeValueStarlark) Freeze()              {}
func (x *TracingConfiguration_ResourceAttributeValueStarlark) Truth() starlark.Bool { return true }
func (x *TracingConfiguration_ResourceAttributeValueStarlark) Hash() (uint32, error) {
	return 0, fmt.Errorf("un-hashable")
}

func (x *TracingConfiguration_ResourceAttributeValueStarlark) AttrNames() []string {
	return []string{
		"kind",
		"bool",
		"int64",
		"float64",
		"string",
		"boolArray", "bool_array",
		"int64Array", "int64_array",
		"float64Array", "float64_array",
		"stringArray", "string_array",
	}
}

func (x *TracingConfiguration_ResourceAttributeValueStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "kind":
		return x.Kind, nil
	case "bool":
		return x.Bool, nil
	case "int64":
		return x.Int64, nil
	case "float64":
		return x.Float64, nil
	case "string":
		return x.String_, nil
	case "boolArray", "bool_array":
		return x.BoolArray, nil
	case "int64Array", "int64_array":
		return x.Int64Array, nil
	case "float64Array", "float64_array":
		return x.Float64Array, nil
	case "stringArray", "string_array":
		return x.StringArray, nil
	default:
		return nil, nil
	}
}

func (x *TracingConfiguration_ResourceAttributeValue) ToStarlark() *TracingConfiguration_ResourceAttributeValueStarlark {
	if x == nil {
		return nil
	}

	var oneof_Kind starlark.Value
	switch x.Kind.(type) {
	case *TracingConfiguration_ResourceAttributeValue_Bool:
		oneof_Kind = starlark.Bool(x.GetBool())
	case *TracingConfiguration_ResourceAttributeValue_Int64:
		oneof_Kind = starlark.MakeInt64(int64(x.GetInt64()))
	case *TracingConfiguration_ResourceAttributeValue_Float64:
		oneof_Kind = starlark.Float(x.GetFloat64())
	case *TracingConfiguration_ResourceAttributeValue_String_:
		oneof_Kind = starlark.String(x.GetString_())
	case *TracingConfiguration_ResourceAttributeValue_BoolArray_:
		oneof_Kind = x.GetBoolArray().ToStarlark()
	case *TracingConfiguration_ResourceAttributeValue_Int64Array_:
		oneof_Kind = x.GetInt64Array().ToStarlark()
	case *TracingConfiguration_ResourceAttributeValue_Float64Array_:
		oneof_Kind = x.GetFloat64Array().ToStarlark()
	case *TracingConfiguration_ResourceAttributeValue_StringArray_:
		oneof_Kind = x.GetStringArray().ToStarlark()
	default:
		oneof_Kind = starlark.None
	}

	return &TracingConfiguration_ResourceAttributeValueStarlark{
		Kind:         oneof_Kind,
		Bool:         starlark.Bool(x.GetBool()),
		Int64:        starlark.MakeInt64(int64(x.GetInt64())),
		Float64:      starlark.Float(x.GetFloat64()),
		String_:      starlark.String(x.GetString_()),
		BoolArray:    x.GetBoolArray().ToStarlark(),
		Int64Array:   x.GetInt64Array().ToStarlark(),
		Float64Array: x.GetFloat64Array().ToStarlark(),
		StringArray:  x.GetStringArray().ToStarlark(),
	}
}

func (x *TracingConfiguration_ResourceAttributeValueStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "kind":
		x.Kind = val.(starlark.Bool)
	case "bool":
		x.Bool = val.(starlark.Bool)
	case "int64":
		x.Int64 = val.(starlark.Int)
	case "float64":
		x.Float64 = val.(starlark.Float)
	case "string":
		x.String_ = val.(starlark.String)
	case "boolArray", "bool_array":
		x.BoolArray = val.(*TracingConfiguration_ResourceAttributeValue_BoolArrayStarlark)
	case "int64Array", "int64_array":
		x.Int64Array = val.(*TracingConfiguration_ResourceAttributeValue_Int64ArrayStarlark)
	case "float64Array", "float64_array":
		x.Float64Array = val.(*TracingConfiguration_ResourceAttributeValue_Float64ArrayStarlark)
	case "stringArray", "string_array":
		x.StringArray = val.(*TracingConfiguration_ResourceAttributeValue_StringArrayStarlark)
	default:
		return nil
	}
	return nil
}

type TracingConfiguration_SamplerStarlark struct {
	Policy            starlark.Value
	Always            starlarkutil.Empty
	Never             starlarkutil.Empty
	ParentBased       *TracingConfiguration_Sampler_ParentBasedStarlark
	TraceIdRatioBased starlark.Float
	MaximumRate       *TracingConfiguration_Sampler_MaximumRateStarlark
}

func init() {
	configuration.Register("buildbarn.configuration.global.TracingConfiguration.Sampler", new(TracingConfiguration_SamplerStarlark))
}

var (
	_ starlark.Value    = (*TracingConfiguration_SamplerStarlark)(nil)
	_ starlark.HasAttrs = (*TracingConfiguration_SamplerStarlark)(nil)
)

func (x *TracingConfiguration_SamplerStarlark) String() string {
	if x == nil {
		return "Sampler{}"
	}
	return fmt.Sprintf("Sampler{"+
		"policy= %s"+
		"always= %s"+
		", never= %s"+
		", parentBased= %s"+
		", traceIdRatioBased= %s"+
		", maximumRate= %s"+
		"}",
		x.Policy,
		x.Always,
		x.Never,
		x.ParentBased,
		x.TraceIdRatioBased,
		x.MaximumRate,
	)
}

func (x *TracingConfiguration_SamplerStarlark) Type() string {
	return "buildbarn.configuration.global.TracingConfiguration.Sampler"
}
func (x *TracingConfiguration_SamplerStarlark) Freeze()              {}
func (x *TracingConfiguration_SamplerStarlark) Truth() starlark.Bool { return true }
func (x *TracingConfiguration_SamplerStarlark) Hash() (uint32, error) {
	return 0, fmt.Errorf("un-hashable")
}

func (x *TracingConfiguration_SamplerStarlark) AttrNames() []string {
	return []string{
		"policy",
		"always",
		"never",
		"parentBased", "parent_based",
		"traceIdRatioBased", "trace_id_ratio_based",
		"maximumRate", "maximum_rate",
	}
}

func (x *TracingConfiguration_SamplerStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "policy":
		return x.Policy, nil
	case "always":
		return x.Always, nil
	case "never":
		return x.Never, nil
	case "parentBased", "parent_based":
		return x.ParentBased, nil
	case "traceIdRatioBased", "trace_id_ratio_based":
		return x.TraceIdRatioBased, nil
	case "maximumRate", "maximum_rate":
		return x.MaximumRate, nil
	default:
		return nil, nil
	}
}

func (x *TracingConfiguration_Sampler) ToStarlark() *TracingConfiguration_SamplerStarlark {
	if x == nil {
		return nil
	}

	var oneof_Policy starlark.Value
	switch x.Policy.(type) {
	case *TracingConfiguration_Sampler_Always:
		oneof_Policy = starlarkutil.ToEmpty(x.GetAlways())
	case *TracingConfiguration_Sampler_Never:
		oneof_Policy = starlarkutil.ToEmpty(x.GetNever())
	case *TracingConfiguration_Sampler_ParentBased_:
		oneof_Policy = x.GetParentBased().ToStarlark()
	case *TracingConfiguration_Sampler_TraceIdRatioBased:
		oneof_Policy = starlark.Float(x.GetTraceIdRatioBased())
	case *TracingConfiguration_Sampler_MaximumRate_:
		oneof_Policy = x.GetMaximumRate().ToStarlark()
	default:
		oneof_Policy = starlark.None
	}

	return &TracingConfiguration_SamplerStarlark{
		Policy:            oneof_Policy,
		Always:            starlarkutil.ToEmpty(x.GetAlways()),
		Never:             starlarkutil.ToEmpty(x.GetNever()),
		ParentBased:       x.GetParentBased().ToStarlark(),
		TraceIdRatioBased: starlark.Float(x.GetTraceIdRatioBased()),
		MaximumRate:       x.GetMaximumRate().ToStarlark(),
	}
}

func (x *TracingConfiguration_SamplerStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "policy":
		x.Policy = val.(starlarkutil.Empty)
	case "always":
		x.Always = val.(starlarkutil.Empty)
	case "never":
		x.Never = val.(starlarkutil.Empty)
	case "parentBased", "parent_based":
		x.ParentBased = val.(*TracingConfiguration_Sampler_ParentBasedStarlark)
	case "traceIdRatioBased", "trace_id_ratio_based":
		x.TraceIdRatioBased = val.(starlark.Float)
	case "maximumRate", "maximum_rate":
		x.MaximumRate = val.(*TracingConfiguration_Sampler_MaximumRateStarlark)
	default:
		return nil
	}
	return nil
}

type TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark struct {
	Endpoint starlark.String
	Tls      *tls.ClientConfigurationStarlark
	Password starlark.String
	Username starlark.String
}

func init() {
	configuration.Register("buildbarn.configuration.global.TracingConfiguration.Backend.JaegerCollectorSpanExporter", new(TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark))
}

var (
	_ starlark.Value    = (*TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark)(nil)
	_ starlark.HasAttrs = (*TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark)(nil)
)

func (x *TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark) String() string {
	if x == nil {
		return "JaegerCollectorSpanExporter{}"
	}
	return fmt.Sprintf("JaegerCollectorSpanExporter{"+
		"endpoint= %s"+
		", tls= %s"+
		", password= %s"+
		", username= %s"+
		"}",
		x.Endpoint,
		x.Tls,
		x.Password,
		x.Username,
	)
}

func (x *TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark) Type() string {
	return "buildbarn.configuration.global.TracingConfiguration.Backend.JaegerCollectorSpanExporter"
}
func (x *TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark) Freeze() {}
func (x *TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark) Truth() starlark.Bool {
	return true
}

func (x *TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark) Hash() (uint32, error) {
	return 0, fmt.Errorf("un-hashable")
}

func (x *TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark) AttrNames() []string {
	return []string{
		"endpoint",
		"tls",
		"password",
		"username",
	}
}

func (x *TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "endpoint":
		return x.Endpoint, nil
	case "tls":
		return x.Tls, nil
	case "password":
		return x.Password, nil
	case "username":
		return x.Username, nil
	default:
		return nil, nil
	}
}

func (x *TracingConfiguration_Backend_JaegerCollectorSpanExporter) ToStarlark() *TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark {
	if x == nil {
		return nil
	}

	return &TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark{
		Endpoint: starlark.String(x.GetEndpoint()),
		Tls:      x.GetTls().ToStarlark(),
		Password: starlark.String(x.GetPassword()),
		Username: starlark.String(x.GetUsername()),
	}
}

func (x *TracingConfiguration_Backend_JaegerCollectorSpanExporterStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "endpoint":
		x.Endpoint = val.(starlark.String)
	case "tls":
		x.Tls = val.(*tls.ClientConfigurationStarlark)
	case "password":
		x.Password = val.(starlark.String)
	case "username":
		x.Username = val.(starlark.String)
	default:
		return nil
	}
	return nil
}

type TracingConfiguration_Backend_BatchSpanProcessorStarlark struct {
	BatchTimeout       time.Duration
	Blocking           starlark.Bool
	ExportTimeout      time.Duration
	MaxExportBatchSize starlark.Int
	MaxQueueSize       starlark.Int
}

func init() {
	configuration.Register("buildbarn.configuration.global.TracingConfiguration.Backend.BatchSpanProcessor", new(TracingConfiguration_Backend_BatchSpanProcessorStarlark))
}

var (
	_ starlark.Value    = (*TracingConfiguration_Backend_BatchSpanProcessorStarlark)(nil)
	_ starlark.HasAttrs = (*TracingConfiguration_Backend_BatchSpanProcessorStarlark)(nil)
)

func (x *TracingConfiguration_Backend_BatchSpanProcessorStarlark) String() string {
	if x == nil {
		return "BatchSpanProcessor{}"
	}
	return fmt.Sprintf("BatchSpanProcessor{"+
		"batchTimeout= %s"+
		", blocking= %s"+
		", exportTimeout= %s"+
		", maxExportBatchSize= %s"+
		", maxQueueSize= %s"+
		"}",
		x.BatchTimeout,
		x.Blocking,
		x.ExportTimeout,
		x.MaxExportBatchSize,
		x.MaxQueueSize,
	)
}

func (x *TracingConfiguration_Backend_BatchSpanProcessorStarlark) Type() string {
	return "buildbarn.configuration.global.TracingConfiguration.Backend.BatchSpanProcessor"
}
func (x *TracingConfiguration_Backend_BatchSpanProcessorStarlark) Freeze()              {}
func (x *TracingConfiguration_Backend_BatchSpanProcessorStarlark) Truth() starlark.Bool { return true }
func (x *TracingConfiguration_Backend_BatchSpanProcessorStarlark) Hash() (uint32, error) {
	return 0, fmt.Errorf("un-hashable")
}

func (x *TracingConfiguration_Backend_BatchSpanProcessorStarlark) AttrNames() []string {
	return []string{
		"batchTimeout", "batch_timeout",
		"blocking",
		"exportTimeout", "export_timeout",
		"maxExportBatchSize", "max_export_batch_size",
		"maxQueueSize", "max_queue_size",
	}
}

func (x *TracingConfiguration_Backend_BatchSpanProcessorStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "batchTimeout", "batch_timeout":
		return x.BatchTimeout, nil
	case "blocking":
		return x.Blocking, nil
	case "exportTimeout", "export_timeout":
		return x.ExportTimeout, nil
	case "maxExportBatchSize", "max_export_batch_size":
		return x.MaxExportBatchSize, nil
	case "maxQueueSize", "max_queue_size":
		return x.MaxQueueSize, nil
	default:
		return nil, nil
	}
}

func (x *TracingConfiguration_Backend_BatchSpanProcessor) ToStarlark() *TracingConfiguration_Backend_BatchSpanProcessorStarlark {
	if x == nil {
		return nil
	}

	return &TracingConfiguration_Backend_BatchSpanProcessorStarlark{
		BatchTimeout:       time.Duration(x.GetBatchTimeout().AsDuration()),
		Blocking:           starlark.Bool(x.GetBlocking()),
		ExportTimeout:      time.Duration(x.GetExportTimeout().AsDuration()),
		MaxExportBatchSize: starlark.MakeInt64(int64(x.GetMaxExportBatchSize())),
		MaxQueueSize:       starlark.MakeInt64(int64(x.GetMaxQueueSize())),
	}
}

func (x *TracingConfiguration_Backend_BatchSpanProcessorStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "batchTimeout", "batch_timeout":
		x.BatchTimeout = val.(time.Duration)
	case "blocking":
		x.Blocking = val.(starlark.Bool)
	case "exportTimeout", "export_timeout":
		x.ExportTimeout = val.(time.Duration)
	case "maxExportBatchSize", "max_export_batch_size":
		x.MaxExportBatchSize = val.(starlark.Int)
	case "maxQueueSize", "max_queue_size":
		x.MaxQueueSize = val.(starlark.Int)
	default:
		return nil
	}
	return nil
}

type TracingConfiguration_ResourceAttributeValue_BoolArrayStarlark struct {
	Values *starlark.List
}

func init() {
	configuration.Register("buildbarn.configuration.global.TracingConfiguration.ResourceAttributeValue.BoolArray", new(TracingConfiguration_ResourceAttributeValue_BoolArrayStarlark))
}

var (
	_ starlark.Value    = (*TracingConfiguration_ResourceAttributeValue_BoolArrayStarlark)(nil)
	_ starlark.HasAttrs = (*TracingConfiguration_ResourceAttributeValue_BoolArrayStarlark)(nil)
)

func (x *TracingConfiguration_ResourceAttributeValue_BoolArrayStarlark) String() string {
	if x == nil {
		return "BoolArray{}"
	}
	return fmt.Sprintf("BoolArray{"+
		"values= %s"+
		"}",
		x.Values,
	)
}

func (x *TracingConfiguration_ResourceAttributeValue_BoolArrayStarlark) Type() string {
	return "buildbarn.configuration.global.TracingConfiguration.ResourceAttributeValue.BoolArray"
}
func (x *TracingConfiguration_ResourceAttributeValue_BoolArrayStarlark) Freeze() {}
func (x *TracingConfiguration_ResourceAttributeValue_BoolArrayStarlark) Truth() starlark.Bool {
	return true
}

func (x *TracingConfiguration_ResourceAttributeValue_BoolArrayStarlark) Hash() (uint32, error) {
	return 0, fmt.Errorf("un-hashable")
}

func (x *TracingConfiguration_ResourceAttributeValue_BoolArrayStarlark) AttrNames() []string {
	return []string{
		"values",
	}
}

func (x *TracingConfiguration_ResourceAttributeValue_BoolArrayStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "values":
		return x.Values, nil
	default:
		return nil, nil
	}
}

func (x *TracingConfiguration_ResourceAttributeValue_BoolArray) ToStarlark() *TracingConfiguration_ResourceAttributeValue_BoolArrayStarlark {
	if x == nil {
		return nil
	}

	l_Values := make([]starlark.Value, len(x.GetValues()))
	for i, x := range x.GetValues() {
		l_Values[i] = starlark.Bool(x)
	}

	return &TracingConfiguration_ResourceAttributeValue_BoolArrayStarlark{
		Values: starlark.NewList(l_Values),
	}
}

func (x *TracingConfiguration_ResourceAttributeValue_BoolArrayStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "values":
		x.Values = val.(*starlark.List)
	default:
		return nil
	}
	return nil
}

type TracingConfiguration_ResourceAttributeValue_Int64ArrayStarlark struct {
	Values *starlark.List
}

func init() {
	configuration.Register("buildbarn.configuration.global.TracingConfiguration.ResourceAttributeValue.Int64Array", new(TracingConfiguration_ResourceAttributeValue_Int64ArrayStarlark))
}

var (
	_ starlark.Value    = (*TracingConfiguration_ResourceAttributeValue_Int64ArrayStarlark)(nil)
	_ starlark.HasAttrs = (*TracingConfiguration_ResourceAttributeValue_Int64ArrayStarlark)(nil)
)

func (x *TracingConfiguration_ResourceAttributeValue_Int64ArrayStarlark) String() string {
	if x == nil {
		return "Int64Array{}"
	}
	return fmt.Sprintf("Int64Array{"+
		"values= %s"+
		"}",
		x.Values,
	)
}

func (x *TracingConfiguration_ResourceAttributeValue_Int64ArrayStarlark) Type() string {
	return "buildbarn.configuration.global.TracingConfiguration.ResourceAttributeValue.Int64Array"
}
func (x *TracingConfiguration_ResourceAttributeValue_Int64ArrayStarlark) Freeze() {}
func (x *TracingConfiguration_ResourceAttributeValue_Int64ArrayStarlark) Truth() starlark.Bool {
	return true
}

func (x *TracingConfiguration_ResourceAttributeValue_Int64ArrayStarlark) Hash() (uint32, error) {
	return 0, fmt.Errorf("un-hashable")
}

func (x *TracingConfiguration_ResourceAttributeValue_Int64ArrayStarlark) AttrNames() []string {
	return []string{
		"values",
	}
}

func (x *TracingConfiguration_ResourceAttributeValue_Int64ArrayStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "values":
		return x.Values, nil
	default:
		return nil, nil
	}
}

func (x *TracingConfiguration_ResourceAttributeValue_Int64Array) ToStarlark() *TracingConfiguration_ResourceAttributeValue_Int64ArrayStarlark {
	if x == nil {
		return nil
	}

	l_Values := make([]starlark.Value, len(x.GetValues()))
	for i, x := range x.GetValues() {
		l_Values[i] = starlark.MakeInt64(int64(x))
	}

	return &TracingConfiguration_ResourceAttributeValue_Int64ArrayStarlark{
		Values: starlark.NewList(l_Values),
	}
}

func (x *TracingConfiguration_ResourceAttributeValue_Int64ArrayStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "values":
		x.Values = val.(*starlark.List)
	default:
		return nil
	}
	return nil
}

type TracingConfiguration_ResourceAttributeValue_Float64ArrayStarlark struct {
	Values *starlark.List
}

func init() {
	configuration.Register("buildbarn.configuration.global.TracingConfiguration.ResourceAttributeValue.Float64Array", new(TracingConfiguration_ResourceAttributeValue_Float64ArrayStarlark))
}

var (
	_ starlark.Value    = (*TracingConfiguration_ResourceAttributeValue_Float64ArrayStarlark)(nil)
	_ starlark.HasAttrs = (*TracingConfiguration_ResourceAttributeValue_Float64ArrayStarlark)(nil)
)

func (x *TracingConfiguration_ResourceAttributeValue_Float64ArrayStarlark) String() string {
	if x == nil {
		return "Float64Array{}"
	}
	return fmt.Sprintf("Float64Array{"+
		"values= %s"+
		"}",
		x.Values,
	)
}

func (x *TracingConfiguration_ResourceAttributeValue_Float64ArrayStarlark) Type() string {
	return "buildbarn.configuration.global.TracingConfiguration.ResourceAttributeValue.Float64Array"
}
func (x *TracingConfiguration_ResourceAttributeValue_Float64ArrayStarlark) Freeze() {}
func (x *TracingConfiguration_ResourceAttributeValue_Float64ArrayStarlark) Truth() starlark.Bool {
	return true
}

func (x *TracingConfiguration_ResourceAttributeValue_Float64ArrayStarlark) Hash() (uint32, error) {
	return 0, fmt.Errorf("un-hashable")
}

func (x *TracingConfiguration_ResourceAttributeValue_Float64ArrayStarlark) AttrNames() []string {
	return []string{
		"values",
	}
}

func (x *TracingConfiguration_ResourceAttributeValue_Float64ArrayStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "values":
		return x.Values, nil
	default:
		return nil, nil
	}
}

func (x *TracingConfiguration_ResourceAttributeValue_Float64Array) ToStarlark() *TracingConfiguration_ResourceAttributeValue_Float64ArrayStarlark {
	if x == nil {
		return nil
	}

	l_Values := make([]starlark.Value, len(x.GetValues()))
	for i, x := range x.GetValues() {
		l_Values[i] = starlark.Float(x)
	}

	return &TracingConfiguration_ResourceAttributeValue_Float64ArrayStarlark{
		Values: starlark.NewList(l_Values),
	}
}

func (x *TracingConfiguration_ResourceAttributeValue_Float64ArrayStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "values":
		x.Values = val.(*starlark.List)
	default:
		return nil
	}
	return nil
}

type TracingConfiguration_ResourceAttributeValue_StringArrayStarlark struct {
	Values *starlark.List
}

func init() {
	configuration.Register("buildbarn.configuration.global.TracingConfiguration.ResourceAttributeValue.StringArray", new(TracingConfiguration_ResourceAttributeValue_StringArrayStarlark))
}

var (
	_ starlark.Value    = (*TracingConfiguration_ResourceAttributeValue_StringArrayStarlark)(nil)
	_ starlark.HasAttrs = (*TracingConfiguration_ResourceAttributeValue_StringArrayStarlark)(nil)
)

func (x *TracingConfiguration_ResourceAttributeValue_StringArrayStarlark) String() string {
	if x == nil {
		return "StringArray{}"
	}
	return fmt.Sprintf("StringArray{"+
		"values= %s"+
		"}",
		x.Values,
	)
}

func (x *TracingConfiguration_ResourceAttributeValue_StringArrayStarlark) Type() string {
	return "buildbarn.configuration.global.TracingConfiguration.ResourceAttributeValue.StringArray"
}
func (x *TracingConfiguration_ResourceAttributeValue_StringArrayStarlark) Freeze() {}
func (x *TracingConfiguration_ResourceAttributeValue_StringArrayStarlark) Truth() starlark.Bool {
	return true
}

func (x *TracingConfiguration_ResourceAttributeValue_StringArrayStarlark) Hash() (uint32, error) {
	return 0, fmt.Errorf("un-hashable")
}

func (x *TracingConfiguration_ResourceAttributeValue_StringArrayStarlark) AttrNames() []string {
	return []string{
		"values",
	}
}

func (x *TracingConfiguration_ResourceAttributeValue_StringArrayStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "values":
		return x.Values, nil
	default:
		return nil, nil
	}
}

func (x *TracingConfiguration_ResourceAttributeValue_StringArray) ToStarlark() *TracingConfiguration_ResourceAttributeValue_StringArrayStarlark {
	if x == nil {
		return nil
	}

	l_Values := make([]starlark.Value, len(x.GetValues()))
	for i, x := range x.GetValues() {
		l_Values[i] = starlark.String(x)
	}

	return &TracingConfiguration_ResourceAttributeValue_StringArrayStarlark{
		Values: starlark.NewList(l_Values),
	}
}

func (x *TracingConfiguration_ResourceAttributeValue_StringArrayStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "values":
		x.Values = val.(*starlark.List)
	default:
		return nil
	}
	return nil
}

type TracingConfiguration_Sampler_ParentBasedStarlark struct {
	NoParent               *TracingConfiguration_SamplerStarlark
	LocalParentNotSampled  *TracingConfiguration_SamplerStarlark
	LocalParentSampled     *TracingConfiguration_SamplerStarlark
	RemoteParentNotSampled *TracingConfiguration_SamplerStarlark
	RemoteParentSampled    *TracingConfiguration_SamplerStarlark
}

func init() {
	configuration.Register("buildbarn.configuration.global.TracingConfiguration.Sampler.ParentBased", new(TracingConfiguration_Sampler_ParentBasedStarlark))
}

var (
	_ starlark.Value    = (*TracingConfiguration_Sampler_ParentBasedStarlark)(nil)
	_ starlark.HasAttrs = (*TracingConfiguration_Sampler_ParentBasedStarlark)(nil)
)

func (x *TracingConfiguration_Sampler_ParentBasedStarlark) String() string {
	if x == nil {
		return "ParentBased{}"
	}
	return fmt.Sprintf("ParentBased{"+
		"noParent= %s"+
		", localParentNotSampled= %s"+
		", localParentSampled= %s"+
		", remoteParentNotSampled= %s"+
		", remoteParentSampled= %s"+
		"}",
		x.NoParent,
		x.LocalParentNotSampled,
		x.LocalParentSampled,
		x.RemoteParentNotSampled,
		x.RemoteParentSampled,
	)
}

func (x *TracingConfiguration_Sampler_ParentBasedStarlark) Type() string {
	return "buildbarn.configuration.global.TracingConfiguration.Sampler.ParentBased"
}
func (x *TracingConfiguration_Sampler_ParentBasedStarlark) Freeze()              {}
func (x *TracingConfiguration_Sampler_ParentBasedStarlark) Truth() starlark.Bool { return true }
func (x *TracingConfiguration_Sampler_ParentBasedStarlark) Hash() (uint32, error) {
	return 0, fmt.Errorf("un-hashable")
}

func (x *TracingConfiguration_Sampler_ParentBasedStarlark) AttrNames() []string {
	return []string{
		"noParent", "no_parent",
		"localParentNotSampled", "local_parent_not_sampled",
		"localParentSampled", "local_parent_sampled",
		"remoteParentNotSampled", "remote_parent_not_sampled",
		"remoteParentSampled", "remote_parent_sampled",
	}
}

func (x *TracingConfiguration_Sampler_ParentBasedStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "noParent", "no_parent":
		return x.NoParent, nil
	case "localParentNotSampled", "local_parent_not_sampled":
		return x.LocalParentNotSampled, nil
	case "localParentSampled", "local_parent_sampled":
		return x.LocalParentSampled, nil
	case "remoteParentNotSampled", "remote_parent_not_sampled":
		return x.RemoteParentNotSampled, nil
	case "remoteParentSampled", "remote_parent_sampled":
		return x.RemoteParentSampled, nil
	default:
		return nil, nil
	}
}

func (x *TracingConfiguration_Sampler_ParentBased) ToStarlark() *TracingConfiguration_Sampler_ParentBasedStarlark {
	if x == nil {
		return nil
	}

	return &TracingConfiguration_Sampler_ParentBasedStarlark{
		NoParent:               x.GetNoParent().ToStarlark(),
		LocalParentNotSampled:  x.GetLocalParentNotSampled().ToStarlark(),
		LocalParentSampled:     x.GetLocalParentSampled().ToStarlark(),
		RemoteParentNotSampled: x.GetRemoteParentNotSampled().ToStarlark(),
		RemoteParentSampled:    x.GetRemoteParentSampled().ToStarlark(),
	}
}

func (x *TracingConfiguration_Sampler_ParentBasedStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "noParent", "no_parent":
		x.NoParent = val.(*TracingConfiguration_SamplerStarlark)
	case "localParentNotSampled", "local_parent_not_sampled":
		x.LocalParentNotSampled = val.(*TracingConfiguration_SamplerStarlark)
	case "localParentSampled", "local_parent_sampled":
		x.LocalParentSampled = val.(*TracingConfiguration_SamplerStarlark)
	case "remoteParentNotSampled", "remote_parent_not_sampled":
		x.RemoteParentNotSampled = val.(*TracingConfiguration_SamplerStarlark)
	case "remoteParentSampled", "remote_parent_sampled":
		x.RemoteParentSampled = val.(*TracingConfiguration_SamplerStarlark)
	default:
		return nil
	}
	return nil
}

type TracingConfiguration_Sampler_MaximumRateStarlark struct {
	SamplesPerEpoch starlark.Int
	EpochDuration   time.Duration
}

func init() {
	configuration.Register("buildbarn.configuration.global.TracingConfiguration.Sampler.MaximumRate", new(TracingConfiguration_Sampler_MaximumRateStarlark))
}

var (
	_ starlark.Value    = (*TracingConfiguration_Sampler_MaximumRateStarlark)(nil)
	_ starlark.HasAttrs = (*TracingConfiguration_Sampler_MaximumRateStarlark)(nil)
)

func (x *TracingConfiguration_Sampler_MaximumRateStarlark) String() string {
	if x == nil {
		return "MaximumRate{}"
	}
	return fmt.Sprintf("MaximumRate{"+
		"samplesPerEpoch= %s"+
		", epochDuration= %s"+
		"}",
		x.SamplesPerEpoch,
		x.EpochDuration,
	)
}

func (x *TracingConfiguration_Sampler_MaximumRateStarlark) Type() string {
	return "buildbarn.configuration.global.TracingConfiguration.Sampler.MaximumRate"
}
func (x *TracingConfiguration_Sampler_MaximumRateStarlark) Freeze()              {}
func (x *TracingConfiguration_Sampler_MaximumRateStarlark) Truth() starlark.Bool { return true }
func (x *TracingConfiguration_Sampler_MaximumRateStarlark) Hash() (uint32, error) {
	return 0, fmt.Errorf("un-hashable")
}

func (x *TracingConfiguration_Sampler_MaximumRateStarlark) AttrNames() []string {
	return []string{
		"samplesPerEpoch", "samples_per_epoch",
		"epochDuration", "epoch_duration",
	}
}

func (x *TracingConfiguration_Sampler_MaximumRateStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "samplesPerEpoch", "samples_per_epoch":
		return x.SamplesPerEpoch, nil
	case "epochDuration", "epoch_duration":
		return x.EpochDuration, nil
	default:
		return nil, nil
	}
}

func (x *TracingConfiguration_Sampler_MaximumRate) ToStarlark() *TracingConfiguration_Sampler_MaximumRateStarlark {
	if x == nil {
		return nil
	}

	return &TracingConfiguration_Sampler_MaximumRateStarlark{
		SamplesPerEpoch: starlark.MakeInt64(int64(x.GetSamplesPerEpoch())),
		EpochDuration:   time.Duration(x.GetEpochDuration().AsDuration()),
	}
}

func (x *TracingConfiguration_Sampler_MaximumRateStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "samplesPerEpoch", "samples_per_epoch":
		x.SamplesPerEpoch = val.(starlark.Int)
	case "epochDuration", "epoch_duration":
		x.EpochDuration = val.(time.Duration)
	default:
		return nil
	}
	return nil
}
