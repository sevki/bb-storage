// Code generated by protoc-gen-starlark-go. DO NOT EDIT.

package digest

import (
	fmt "fmt"

	configuration "github.com/buildbarn/bb-storage/pkg/proto/configuration"
	_ "github.com/buildbarn/bb-storage/pkg/proto/configuration/eviction"
	time "go.starlark.net/lib/time"
	starlark "go.starlark.net/starlark"
	_ "google.golang.org/protobuf/types/known/durationpb"
)

type ExistenceCacheConfigurationStarlark struct {
	CacheSize              starlark.Int
	CacheDuration          time.Duration
	CacheReplacementPolicy starlark.String
}

func init() {
	configuration.Register("buildbarn.configuration.digest.ExistenceCacheConfiguration", new(ExistenceCacheConfigurationStarlark))
}

var (
	_ starlark.Value    = (*ExistenceCacheConfigurationStarlark)(nil)
	_ starlark.HasAttrs = (*ExistenceCacheConfigurationStarlark)(nil)
)

func (x *ExistenceCacheConfigurationStarlark) String() string {
	if x == nil {
		return "ExistenceCacheConfiguration{}"
	}
	return fmt.Sprintf("ExistenceCacheConfiguration{"+
		"cacheSize= %s"+
		", cacheDuration= %s"+
		", cacheReplacementPolicy= %s"+
		"}",
		x.CacheSize,
		x.CacheDuration,
		x.CacheReplacementPolicy,
	)
}

func (x *ExistenceCacheConfigurationStarlark) Type() string {
	return "buildbarn.configuration.digest.ExistenceCacheConfiguration"
}
func (x *ExistenceCacheConfigurationStarlark) Freeze()              {}
func (x *ExistenceCacheConfigurationStarlark) Truth() starlark.Bool { return true }
func (x *ExistenceCacheConfigurationStarlark) Hash() (uint32, error) {
	return 0, fmt.Errorf("un-hashable")
}

func (x *ExistenceCacheConfigurationStarlark) AttrNames() []string {
	return []string{
		"cacheSize", "cache_size",
		"cacheDuration", "cache_duration",
		"cacheReplacementPolicy", "cache_replacement_policy",
	}
}

func (x *ExistenceCacheConfigurationStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "cacheSize", "cache_size":
		return x.CacheSize, nil
	case "cacheDuration", "cache_duration":
		return x.CacheDuration, nil
	case "cacheReplacementPolicy", "cache_replacement_policy":
		return x.CacheReplacementPolicy, nil
	default:
		return nil, nil
	}
}

func (x *ExistenceCacheConfiguration) ToStarlark() *ExistenceCacheConfigurationStarlark {
	if x == nil {
		return nil
	}

	return &ExistenceCacheConfigurationStarlark{
		CacheSize:              starlark.MakeInt64(int64(x.GetCacheSize())),
		CacheDuration:          time.Duration(x.GetCacheDuration().AsDuration()),
		CacheReplacementPolicy: starlark.String(x.GetCacheReplacementPolicy().String()),
	}
}

func (x *ExistenceCacheConfigurationStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "cacheSize", "cache_size":
		x.CacheSize = val.(starlark.Int)
	case "cacheDuration", "cache_duration":
		x.CacheDuration = val.(time.Duration)
	case "cacheReplacementPolicy", "cache_replacement_policy":
		x.CacheReplacementPolicy = val.(starlark.String)
	default:
		return nil
	}
	return nil
}
