// Code generated by protoc-gen-starlark-go. DO NOT EDIT.

package bb_replicator

import (
	fmt "fmt"

	configuration "github.com/buildbarn/bb-storage/pkg/proto/configuration"
	blobstore "github.com/buildbarn/bb-storage/pkg/proto/configuration/blobstore"
	global "github.com/buildbarn/bb-storage/pkg/proto/configuration/global"
	_ "github.com/buildbarn/bb-storage/pkg/proto/configuration/grpc"
	starlark "go.starlark.net/starlark"
)

type ApplicationConfigurationStarlark struct {
	GrpcServers             *starlark.List
	Source                  *blobstore.BlobAccessConfigurationStarlark
	Sink                    *blobstore.BlobAccessConfigurationStarlark
	Replicator              *blobstore.BlobReplicatorConfigurationStarlark
	MaximumMessageSizeBytes starlark.Int
	Global                  *global.ConfigurationStarlark
}

func init() {
	configuration.Register("buildbarn.configuration.bb_replicator.ApplicationConfiguration", new(ApplicationConfigurationStarlark))
}

var (
	_ starlark.Value    = (*ApplicationConfigurationStarlark)(nil)
	_ starlark.HasAttrs = (*ApplicationConfigurationStarlark)(nil)
)

func (x *ApplicationConfigurationStarlark) String() string {
	if x == nil {
		return "ApplicationConfiguration{}"
	}
	return fmt.Sprintf("ApplicationConfiguration{"+
		"grpcServers= %s"+
		", source= %s"+
		", sink= %s"+
		", replicator= %s"+
		", maximumMessageSizeBytes= %s"+
		", global= %s"+
		"}",
		x.GrpcServers,
		x.Source,
		x.Sink,
		x.Replicator,
		x.MaximumMessageSizeBytes,
		x.Global,
	)
}

func (x *ApplicationConfigurationStarlark) Type() string {
	return "buildbarn.configuration.bb_replicator.ApplicationConfiguration"
}
func (x *ApplicationConfigurationStarlark) Freeze()              {}
func (x *ApplicationConfigurationStarlark) Truth() starlark.Bool { return true }
func (x *ApplicationConfigurationStarlark) Hash() (uint32, error) {
	return 0, fmt.Errorf("un-hashable")
}

func (x *ApplicationConfigurationStarlark) AttrNames() []string {
	return []string{
		"grpcServers", "grpc_servers",
		"source",
		"sink",
		"replicator",
		"maximumMessageSizeBytes", "maximum_message_size_bytes",
		"global",
	}
}

func (x *ApplicationConfigurationStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "grpcServers", "grpc_servers":
		return x.GrpcServers, nil
	case "source":
		return x.Source, nil
	case "sink":
		return x.Sink, nil
	case "replicator":
		return x.Replicator, nil
	case "maximumMessageSizeBytes", "maximum_message_size_bytes":
		return x.MaximumMessageSizeBytes, nil
	case "global":
		return x.Global, nil
	default:
		return nil, nil
	}
}

func (x *ApplicationConfiguration) ToStarlark() *ApplicationConfigurationStarlark {
	if x == nil {
		return nil
	}

	l_GrpcServers := make([]starlark.Value, len(x.GetGrpcServers()))
	for i, x := range x.GetGrpcServers() {
		l_GrpcServers[i] = x.ToStarlark()
	}

	return &ApplicationConfigurationStarlark{
		GrpcServers:             starlark.NewList(l_GrpcServers),
		Source:                  x.GetSource().ToStarlark(),
		Sink:                    x.GetSink().ToStarlark(),
		Replicator:              x.GetReplicator().ToStarlark(),
		MaximumMessageSizeBytes: starlark.MakeInt64(int64(x.GetMaximumMessageSizeBytes())),
		Global:                  x.GetGlobal().ToStarlark(),
	}
}

func (x *ApplicationConfigurationStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "grpcServers", "grpc_servers":
		x.GrpcServers = val.(*starlark.List)
	case "source":
		x.Source = val.(*blobstore.BlobAccessConfigurationStarlark)
	case "sink":
		x.Sink = val.(*blobstore.BlobAccessConfigurationStarlark)
	case "replicator":
		x.Replicator = val.(*blobstore.BlobReplicatorConfigurationStarlark)
	case "maximumMessageSizeBytes", "maximum_message_size_bytes":
		x.MaximumMessageSizeBytes = val.(starlark.Int)
	case "global":
		x.Global = val.(*global.ConfigurationStarlark)
	default:
		return nil
	}
	return nil
}
