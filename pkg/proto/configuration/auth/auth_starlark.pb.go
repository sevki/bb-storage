// Code generated by protoc-gen-starlark-go. DO NOT EDIT.

package auth

import (
	fmt "fmt"

	configuration "github.com/buildbarn/bb-storage/pkg/proto/configuration"
	starlarkutil "github.com/buildbarn/bb-storage/pkg/starlarkutil"
	starlark "go.starlark.net/starlark"
	_ "google.golang.org/protobuf/types/known/emptypb"
)

type AuthorizerConfigurationStarlark struct {
	Policy             starlark.Value
	Allow              starlarkutil.Empty
	InstanceNamePrefix *InstanceNameAuthorizerStarlark
	Deny               starlarkutil.Empty
}

func init() {
	configuration.Register("buildbarn.configuration.auth.AuthorizerConfiguration", new(AuthorizerConfigurationStarlark))
}

var (
	_ starlark.Value    = (*AuthorizerConfigurationStarlark)(nil)
	_ starlark.HasAttrs = (*AuthorizerConfigurationStarlark)(nil)
)

func (x *AuthorizerConfigurationStarlark) String() string {
	if x == nil {
		return "AuthorizerConfiguration{}"
	}
	return fmt.Sprintf("AuthorizerConfiguration{"+
		"policy= %s"+
		"allow= %s"+
		", instanceNamePrefix= %s"+
		", deny= %s"+
		"}",
		x.Policy,
		x.Allow,
		x.InstanceNamePrefix,
		x.Deny,
	)
}

func (x *AuthorizerConfigurationStarlark) Type() string {
	return "buildbarn.configuration.auth.AuthorizerConfiguration"
}
func (x *AuthorizerConfigurationStarlark) Freeze()               {}
func (x *AuthorizerConfigurationStarlark) Truth() starlark.Bool  { return true }
func (x *AuthorizerConfigurationStarlark) Hash() (uint32, error) { return 0, fmt.Errorf("un-hashable") }
func (x *AuthorizerConfigurationStarlark) AttrNames() []string {
	return []string{
		"policy",
		"allow",
		"instanceNamePrefix", "instance_name_prefix",
		"deny",
	}
}

func (x *AuthorizerConfigurationStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "policy":
		return x.Policy, nil
	case "allow":
		return x.Allow, nil
	case "instanceNamePrefix", "instance_name_prefix":
		return x.InstanceNamePrefix, nil
	case "deny":
		return x.Deny, nil
	default:
		return nil, nil
	}
}

func (x *AuthorizerConfiguration) ToStarlark() *AuthorizerConfigurationStarlark {
	if x == nil {
		return nil
	}

	var oneof_Policy starlark.Value
	switch x.Policy.(type) {
	case *AuthorizerConfiguration_Allow:
		oneof_Policy = starlarkutil.ToEmpty(x.GetAllow())
	case *AuthorizerConfiguration_InstanceNamePrefix:
		oneof_Policy = x.GetInstanceNamePrefix().ToStarlark()
	case *AuthorizerConfiguration_Deny:
		oneof_Policy = starlarkutil.ToEmpty(x.GetDeny())
	default:
		oneof_Policy = starlark.None
	}

	return &AuthorizerConfigurationStarlark{
		Policy:             oneof_Policy,
		Allow:              starlarkutil.ToEmpty(x.GetAllow()),
		InstanceNamePrefix: x.GetInstanceNamePrefix().ToStarlark(),
		Deny:               starlarkutil.ToEmpty(x.GetDeny()),
	}
}

func (x *AuthorizerConfigurationStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "policy":
		x.Policy = val.(starlarkutil.Empty)
	case "allow":
		x.Allow = val.(starlarkutil.Empty)
	case "instanceNamePrefix", "instance_name_prefix":
		x.InstanceNamePrefix = val.(*InstanceNameAuthorizerStarlark)
	case "deny":
		x.Deny = val.(starlarkutil.Empty)
	default:
		return nil
	}
	return nil
}

type InstanceNameAuthorizerStarlark struct {
	AllowedInstanceNamePrefixes *starlark.List
}

func init() {
	configuration.Register("buildbarn.configuration.auth.InstanceNameAuthorizer", new(InstanceNameAuthorizerStarlark))
}

var (
	_ starlark.Value    = (*InstanceNameAuthorizerStarlark)(nil)
	_ starlark.HasAttrs = (*InstanceNameAuthorizerStarlark)(nil)
)

func (x *InstanceNameAuthorizerStarlark) String() string {
	if x == nil {
		return "InstanceNameAuthorizer{}"
	}
	return fmt.Sprintf("InstanceNameAuthorizer{"+
		"allowedInstanceNamePrefixes= %s"+
		"}",
		x.AllowedInstanceNamePrefixes,
	)
}

func (x *InstanceNameAuthorizerStarlark) Type() string {
	return "buildbarn.configuration.auth.InstanceNameAuthorizer"
}
func (x *InstanceNameAuthorizerStarlark) Freeze()               {}
func (x *InstanceNameAuthorizerStarlark) Truth() starlark.Bool  { return true }
func (x *InstanceNameAuthorizerStarlark) Hash() (uint32, error) { return 0, fmt.Errorf("un-hashable") }
func (x *InstanceNameAuthorizerStarlark) AttrNames() []string {
	return []string{
		"allowedInstanceNamePrefixes", "allowed_instance_name_prefixes",
	}
}

func (x *InstanceNameAuthorizerStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "allowedInstanceNamePrefixes", "allowed_instance_name_prefixes":
		return x.AllowedInstanceNamePrefixes, nil
	default:
		return nil, nil
	}
}

func (x *InstanceNameAuthorizer) ToStarlark() *InstanceNameAuthorizerStarlark {
	if x == nil {
		return nil
	}

	l_AllowedInstanceNamePrefixes := make([]starlark.Value, len(x.GetAllowedInstanceNamePrefixes()))
	for i, x := range x.GetAllowedInstanceNamePrefixes() {
		l_AllowedInstanceNamePrefixes[i] = starlark.String(x)
	}

	return &InstanceNameAuthorizerStarlark{
		AllowedInstanceNamePrefixes: starlark.NewList(l_AllowedInstanceNamePrefixes),
	}
}

func (x *InstanceNameAuthorizerStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "allowedInstanceNamePrefixes", "allowed_instance_name_prefixes":
		x.AllowedInstanceNamePrefixes = val.(*starlark.List)
	default:
		return nil
	}
	return nil
}
