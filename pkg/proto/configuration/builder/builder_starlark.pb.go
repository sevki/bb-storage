// Code generated by protoc-gen-starlark-go. DO NOT EDIT.

package builder

import (
	fmt "fmt"

	configuration "github.com/buildbarn/bb-storage/pkg/proto/configuration"
	grpc "github.com/buildbarn/bb-storage/pkg/proto/configuration/grpc"
	starlark "go.starlark.net/starlark"
)

type SchedulerConfigurationStarlark struct {
	Endpoint              *grpc.ClientConfigurationStarlark
	AddInstanceNamePrefix starlark.String
}

func init() {
	configuration.Register("buildbarn.configuration.builder.SchedulerConfiguration", new(SchedulerConfigurationStarlark))
}

var (
	_ starlark.Value    = (*SchedulerConfigurationStarlark)(nil)
	_ starlark.HasAttrs = (*SchedulerConfigurationStarlark)(nil)
)

func (x *SchedulerConfigurationStarlark) String() string {
	if x == nil {
		return "SchedulerConfiguration{}"
	}
	return fmt.Sprintf("SchedulerConfiguration{"+
		"endpoint= %s"+
		", addInstanceNamePrefix= %s"+
		"}",
		x.Endpoint,
		x.AddInstanceNamePrefix,
	)
}

func (x *SchedulerConfigurationStarlark) Type() string {
	return "buildbarn.configuration.builder.SchedulerConfiguration"
}
func (x *SchedulerConfigurationStarlark) Freeze()               {}
func (x *SchedulerConfigurationStarlark) Truth() starlark.Bool  { return true }
func (x *SchedulerConfigurationStarlark) Hash() (uint32, error) { return 0, fmt.Errorf("un-hashable") }
func (x *SchedulerConfigurationStarlark) AttrNames() []string {
	return []string{
		"endpoint",
		"addInstanceNamePrefix", "add_instance_name_prefix",
	}
}

func (x *SchedulerConfigurationStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "endpoint":
		return x.Endpoint, nil
	case "addInstanceNamePrefix", "add_instance_name_prefix":
		return x.AddInstanceNamePrefix, nil
	default:
		return nil, nil
	}
}

func (x *SchedulerConfiguration) ToStarlark() *SchedulerConfigurationStarlark {
	if x == nil {
		return nil
	}

	return &SchedulerConfigurationStarlark{
		Endpoint:              x.GetEndpoint().ToStarlark(),
		AddInstanceNamePrefix: starlark.String(x.GetAddInstanceNamePrefix()),
	}
}

func (x *SchedulerConfigurationStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "endpoint":
		x.Endpoint = val.(*grpc.ClientConfigurationStarlark)
	case "addInstanceNamePrefix", "add_instance_name_prefix":
		x.AddInstanceNamePrefix = val.(starlark.String)
	default:
		return nil
	}
	return nil
}
