// Code generated by protoc-gen-starlark-go. DO NOT EDIT.

package tls

import (
	fmt "fmt"

	configuration "github.com/buildbarn/bb-storage/pkg/proto/configuration"
	starlark "go.starlark.net/starlark"
)

type ClientConfigurationStarlark struct {
	ServerCertificateAuthorities starlark.String
	ClientCertificate            starlark.String
	ClientPrivateKey             starlark.String
	CipherSuites                 *starlark.List
	ServerName                   starlark.String
}

func init() {
	configuration.Register("buildbarn.configuration.tls.ClientConfiguration", new(ClientConfigurationStarlark))
}

var (
	_ starlark.Value    = (*ClientConfigurationStarlark)(nil)
	_ starlark.HasAttrs = (*ClientConfigurationStarlark)(nil)
)

func (x *ClientConfigurationStarlark) String() string {
	if x == nil {
		return "ClientConfiguration{}"
	}
	return fmt.Sprintf("ClientConfiguration{"+
		"serverCertificateAuthorities= %s"+
		", clientCertificate= %s"+
		", clientPrivateKey= %s"+
		", cipherSuites= %s"+
		", serverName= %s"+
		"}",
		x.ServerCertificateAuthorities,
		x.ClientCertificate,
		x.ClientPrivateKey,
		x.CipherSuites,
		x.ServerName,
	)
}

func (x *ClientConfigurationStarlark) Type() string {
	return "buildbarn.configuration.tls.ClientConfiguration"
}
func (x *ClientConfigurationStarlark) Freeze()               {}
func (x *ClientConfigurationStarlark) Truth() starlark.Bool  { return true }
func (x *ClientConfigurationStarlark) Hash() (uint32, error) { return 0, fmt.Errorf("un-hashable") }
func (x *ClientConfigurationStarlark) AttrNames() []string {
	return []string{
		"serverCertificateAuthorities", "server_certificate_authorities",
		"clientCertificate", "client_certificate",
		"clientPrivateKey", "client_private_key",
		"cipherSuites", "cipher_suites",
		"serverName", "server_name",
	}
}

func (x *ClientConfigurationStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "serverCertificateAuthorities", "server_certificate_authorities":
		return x.ServerCertificateAuthorities, nil
	case "clientCertificate", "client_certificate":
		return x.ClientCertificate, nil
	case "clientPrivateKey", "client_private_key":
		return x.ClientPrivateKey, nil
	case "cipherSuites", "cipher_suites":
		return x.CipherSuites, nil
	case "serverName", "server_name":
		return x.ServerName, nil
	default:
		return nil, nil
	}
}

func (x *ClientConfiguration) ToStarlark() *ClientConfigurationStarlark {
	if x == nil {
		return nil
	}

	l_CipherSuites := make([]starlark.Value, len(x.GetCipherSuites()))
	for i, x := range x.GetCipherSuites() {
		l_CipherSuites[i] = starlark.String(x)
	}

	return &ClientConfigurationStarlark{
		ServerCertificateAuthorities: starlark.String(x.GetServerCertificateAuthorities()),
		ClientCertificate:            starlark.String(x.GetClientCertificate()),
		ClientPrivateKey:             starlark.String(x.GetClientPrivateKey()),
		CipherSuites:                 starlark.NewList(l_CipherSuites),
		ServerName:                   starlark.String(x.GetServerName()),
	}
}

func (x *ClientConfigurationStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "serverCertificateAuthorities", "server_certificate_authorities":
		x.ServerCertificateAuthorities = val.(starlark.String)
	case "clientCertificate", "client_certificate":
		x.ClientCertificate = val.(starlark.String)
	case "clientPrivateKey", "client_private_key":
		x.ClientPrivateKey = val.(starlark.String)
	case "cipherSuites", "cipher_suites":
		x.CipherSuites = val.(*starlark.List)
	case "serverName", "server_name":
		x.ServerName = val.(starlark.String)
	default:
		return nil
	}
	return nil
}

type ServerConfigurationStarlark struct {
	ServerCertificate starlark.String
	ServerPrivateKey  starlark.String
	CipherSuites      *starlark.List
}

func init() {
	configuration.Register("buildbarn.configuration.tls.ServerConfiguration", new(ServerConfigurationStarlark))
}

var (
	_ starlark.Value    = (*ServerConfigurationStarlark)(nil)
	_ starlark.HasAttrs = (*ServerConfigurationStarlark)(nil)
)

func (x *ServerConfigurationStarlark) String() string {
	if x == nil {
		return "ServerConfiguration{}"
	}
	return fmt.Sprintf("ServerConfiguration{"+
		"serverCertificate= %s"+
		", serverPrivateKey= %s"+
		", cipherSuites= %s"+
		"}",
		x.ServerCertificate,
		x.ServerPrivateKey,
		x.CipherSuites,
	)
}

func (x *ServerConfigurationStarlark) Type() string {
	return "buildbarn.configuration.tls.ServerConfiguration"
}
func (x *ServerConfigurationStarlark) Freeze()               {}
func (x *ServerConfigurationStarlark) Truth() starlark.Bool  { return true }
func (x *ServerConfigurationStarlark) Hash() (uint32, error) { return 0, fmt.Errorf("un-hashable") }
func (x *ServerConfigurationStarlark) AttrNames() []string {
	return []string{
		"serverCertificate", "server_certificate",
		"serverPrivateKey", "server_private_key",
		"cipherSuites", "cipher_suites",
	}
}

func (x *ServerConfigurationStarlark) Attr(name string) (starlark.Value, error) {
	if x == nil {
		return nil, nil
	}
	switch name {
	case "serverCertificate", "server_certificate":
		return x.ServerCertificate, nil
	case "serverPrivateKey", "server_private_key":
		return x.ServerPrivateKey, nil
	case "cipherSuites", "cipher_suites":
		return x.CipherSuites, nil
	default:
		return nil, nil
	}
}

func (x *ServerConfiguration) ToStarlark() *ServerConfigurationStarlark {
	if x == nil {
		return nil
	}

	l_CipherSuites := make([]starlark.Value, len(x.GetCipherSuites()))
	for i, x := range x.GetCipherSuites() {
		l_CipherSuites[i] = starlark.String(x)
	}

	return &ServerConfigurationStarlark{
		ServerCertificate: starlark.String(x.GetServerCertificate()),
		ServerPrivateKey:  starlark.String(x.GetServerPrivateKey()),
		CipherSuites:      starlark.NewList(l_CipherSuites),
	}
}

func (x *ServerConfigurationStarlark) SetField(name string, val starlark.Value) error {
	switch name {
	case "serverCertificate", "server_certificate":
		x.ServerCertificate = val.(starlark.String)
	case "serverPrivateKey", "server_private_key":
		x.ServerPrivateKey = val.(starlark.String)
	case "cipherSuites", "cipher_suites":
		x.CipherSuites = val.(*starlark.List)
	default:
		return nil
	}
	return nil
}
